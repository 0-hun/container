package hashmap

import "testing"

func TestNewLinkMap(t *testing.T) {
	tests := []struct {
		keys   []string
		result []string
	}{
		{
			[]string{"", "1", "aaaaa", "", "1", "aaaaa", "2", "asdfghgfds", "aaaaa", "aaaaa"},
			[]string{"", "1", "aaaaa", "2", "asdfghgfds"},
		},
		{
			[]string{"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",},
			[]string{""},
		},
		{
			[]string{"1", "1", "1", "1", "", "", "", "", "", "", "", "", "", "", "", "", "", "",},
			[]string{"", "1"},
		},
		{
			[]string{"1", "1", "1", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"},
			[]string{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"},
		},
		{
			[]string{"111111111111111111111111111111111111111111111", "111111111111111111111111111111111111111111111", "111111111111111111111111111111111111111111111", "111111111111111111111111111111111111111111111", "111111111111111111111111111111111111111111111", "111111111111111111111111111111111111111111111", "111111111111111111111111111111111111111111111", "111111111111111111111111111111111111111111111",},
			[]string{"111111111111111111111111111111111111111111111"},
		},
	}
	for _, test := range tests {
		m := NewLinkMap()
		for i := 0; i < len(test.keys); i++ {
			m.Set(test.keys[i], test.keys[i])
		}
		for i := 0; i < len(test.result); i++ {
			val, _ := m.Get(test.result[i])
			if val.(string) != test.result[i] {
				t.Fatal("add error", i)
			}
		}
	}
}
